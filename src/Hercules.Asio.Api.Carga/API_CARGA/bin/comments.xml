<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API_CARGA</name>
    </assembly>
    <members>
        <member name="T:API_CARGA.Controllers.etlController">
            <summary>
            Contiene los procesos ETL (Extract, Transform and Load) necesarios para la carga de datos.
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataPublish(Microsoft.AspNetCore.Http.IFormFile,System.String,System.Boolean)">
            <summary>
            Ejecuta el penúltimo paso del proceso de carga, por el que el RDF generado se encola en una cola de Rabbit MQ para que posteriormente el servicio de descubimiento lo procese y lo almacene en el Triple Store. Permite cargar una fuente RDF arbitraria.
            Aquí se encuentra un RDF de Ejemplo: https://github.com/HerculesCRUE/GnossDeustoBackend/blob/master/API_CARGA/API_CARGA/Samples/rdfSample.xml
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <param name="jobId">Identificador de la tarea</param>
            <param name="discoverProcessed">Indica si ya está procesado el descubrimiento</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataValidate(Microsoft.AspNetCore.Http.IFormFile,System.Guid)">
            <summary>
            Valida un RDF mediante el shape SHACL configurado
            Aquí se encuentra un RDF de Ejemplo: https://github.com/HerculesCRUE/GnossDeustoBackend/blob/master/API_CARGA/API_CARGA/Samples/rdfSample.xml
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <param name="repositoryIdentifier">Identificador del repositorio para seleccionar los Shapes (los repositorios disponibles están en /etl-config/repository)</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataValidate(Microsoft.AspNetCore.Http.IFormFile,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Valida un RDF mediante el fichero de validación pasado
            Aquí se encuentra un RDF de Ejemplo: https://github.com/HerculesCRUE/GnossDeustoBackend/blob/master/API_CARGA/API_CARGA/Samples/rdfSample.xml
            </summary>
            <param name="rdfFile">Fichero RDF a validar</param>
            <param name="validationFile">Fichero de validación</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.LoadOntology(Microsoft.AspNetCore.Http.IFormFile,API_CARGA.Models.Entities.OntologyEnum)">
            <summary>
            Elimina la ontologia cargada y la reemplaza por la nueva
            </summary>
            <param name="ontology">Fichero de la nueva ontologia</param>
            <param name="ontologyType">tipo de ontologia; siendo el 0 la ontología roh, el 1 la ontología rohes y el 2 la ontología rohum </param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataDiscover(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Aplica el descubrimiento sobre un RDF
            </summary>
            <param name="rdfFile">Fichero RDF</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.dataDiscoverState(System.Guid)">
            <summary>
            Obtiene el estado de una tarea de descubrimiento descubrimiento
            </summary>
            <param name="identifier">Identificador de la tarea de descubrimiento</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.GetRecord(System.Guid,System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera un registro de metadatos individual del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="identifier">Identificador de la entidad a recolectar (Los identificadores se obtienen con el metodo /etl/ListIdentifiers/{repositoryIdentifier}).</param>
            <param name="metadataPrefix">Prefijo del metadata que se desea recuperar (rdf). Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud /etl/ListMetadataFormats/{repositoryIdentifier}.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.Identify(System.Guid)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Obtiene la información del repositorio OAI-PMH configurado en formato XML OAI-PMH.
            </summary>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListIdentifiers(System.Guid,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Es una forma abreviada de ListRecords, que recupera solo encabezados en formato XML OAI-PMH en lugar de registros.        
            </summary>
            <param name="metadataPrefix">Especifica que los encabezados deben devolverse solo si el formato de metadatos que coincide con el metadataPrefix proporcionado está disponible o, según el soporte del repositorio para las eliminaciones, se ha eliminado. Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListMetadataFormats.</param>
            <param name="from">Fecha de inicio desde la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="until">Fecha de fin hasta la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="set">Argumento con un valor setSpec, que especifica los criterios establecidos para la recolección selectiva. Los formatos de sets admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListSets.</param>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListIdentifiers anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListMetadataFormats(System.Guid,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera los formatos de metadatos disponibles del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="identifier">Argumento opcional que especifica el identificador único del elemento para el que se solicitan los formatos de metadatos disponibles. Si se omite este argumento, la respuesta incluye todos los formatos de metadatos admitidos por este repositorio. </param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListRecords(System.Guid,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recupera registros del repositorio en formato XML OAI-PMH.        
            </summary>
            <param name="metadataPrefix">Especifica que los encabezados deben devolverse solo si el formato de metadatos que coincide con el metadataPrefix proporcionado está disponible o, según el soporte del repositorio para las eliminaciones, se ha eliminado. Los formatos de metadatos admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListMetadataFormats.</param>
            <param name="from">Fecha de inicio desde la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="until">Fecha de fin hasta la que se desean recuperar las cabeceras de las entidades (Codificado con ISO8601 y expresado en UTC, YYYY-MM-DD o YYYY-MM-DDThh:mm:ssZ)</param>
            <param name="set">Argumento con un valor setSpec, que especifica los criterios establecidos para la recolección selectiva. Los formatos de sets admitidos por un repositorio y para un elemento en particular se pueden recuperar mediante la solicitud ListSets.</param>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListRecords anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.ListSets(System.Guid,System.String)">
            <summary>
            Este método hace de PROXY entre el API y el proveedor OAI-PMH.
            Recuperar la estructura establecida de un repositorio en formato XML OAI-PMH, útil para la recolección selectiva.        
            </summary>
            <param name="resumptionToken">Argumento exclusivo con un valor que es el token de control de flujo devuelto por una solicitud ListSets anterior que emitió una lista incompleta.</param>
            <param name="repositoryIdentifier">Identificador del repositorio OAI-PMH (los repositorios disponibles están en /etl-config/repository)</param>
            <returns>XML devuelto por el repositorio OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.etlController.GetOntology(API_CARGA.Models.Entities.OntologyEnum)">
            <summary>
            Devuelve la ontologia cargada     
            </summary>
            <returns>Ontologia</returns>
        </member>
        <member name="T:API_CARGA.Controllers.repositoryController">
            <summary>
            Contiene los procesos necesarios para la gestión de los repositorios OAI-PMH (creación, modificación, eliminación...).
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.GetRepository">
            <summary>
            Obtiene un listado con todas las configuraciones de los repositorios OAI-PMH
            </summary>
            <returns>Listado con todas las configuraciones de los repositorios OAI-PMH</returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.GetRepository(System.Guid)">
            <summary>
            Obtiene la configuración de un repositorio OAI-PMH
            </summary>
            <param name="identifier">Identificador del repositorio, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository</param>
            <returns>Configuración del repositorio</returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.AddConfigRepository(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Añade una nueva configuración de un repositorio OAI-PMH
            </summary>
            <param name="repositoryConfig">Datos de configuración del repositorio</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.DeleteRepository(System.Guid)">
            <summary>
            Elimina la configuración de un repositorio OAI-PMH.
            </summary>
            <param name="identifier">Identificador del repositorio, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.repositoryController.ModifyRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Modifica la configuración de un repositorio OAI-PMH.
            </summary>
            <param name="repositoryConfig">Datos de configuración del repositorio</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Controllers.syncController">
            <summary>
            Contiene los procesos necesarios para la ejecución de las sincronizaciones.
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.syncController.PostSyncro(API_CARGA.ViewModel.PublishRepositoryModel)">
            <summary>
            Ejecuta una sincronización
            </summary>
            <param name="publishModel">Modelo para la ejecución de una sincronización</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Controllers.ValidationController">
            <summary>
            Contiene los procesos necesarios para la gestión de las validaciones (creación, modificación, eliminación...).
            </summary>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.GetShape">
            <summary>
            Obtiene la configuración de los shape SHACL de validación
            </summary>
            <returns>Listado con las definiciones de las validaciones</returns>       
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.GetShape(System.Guid)">
            <summary>
            Obtiene la configuración del shape SHACL pasado por parámetro
            </summary>
            <param name="identifier">Identificador de la validación a obtener, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns>Definición de la validación</returns>       
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.AddShape(System.String,System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Añade una configuración de validación mediante un shape SHACL.
            Aquí se encuentra un Shape SHACL de Ejemplo: https://github.com/HerculesCRUE/GnossDeustoBackend/blob/master/API_CARGA/API_CARGA/Samples/shapeSample.ttl
            </summary>
            <param name="name">Nombre del Shape, elegido por el usuario que lo crea, ejemplo: bibo_Article</param>
            <param name="repositoryID">ID del repositorio de la validación, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <param name="rdfFile">Fichero con el Shape</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.DeleteShape(System.Guid)">
            <summary>
            Elimina la configuración una configuración de validación 
            </summary>
            <param name="identifier">Identificador de la validación a eliminar, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Controllers.ValidationController.ModifyShape(System.Guid,System.String,System.Guid,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Modifica la configuración de validación mediante un shape SHACL.
            Aquí se encuentra un Shape SHACL de Ejemplo: https://github.com/HerculesCRUE/GnossDeustoBackend/blob/master/API_CARGA/API_CARGA/Samples/shapeSample.ttl
            </summary>
            <param name="shapeConfigID">Identificador del Shape a modificar, este párametro se puede obtener de: http://herc-as-front-desa.atica.um.es/carga/etl-config/Validation, ejemplo: bb1c3916-63a3-4b8d-89cf-3a51341482da</param>
            <param name="name">Nombre a modificar para el shape, puede ser el mismo que tenía anteriormente, ejemplo: bibo_Article</param>
            <param name="repositoryID">ID del repositorio de la validacióna modificar, este parametro se puede obtener con el método http://herc-as-front-desa.atica.um.es/carga/etl-config/Repository, ejemplo: 5efac0ad-ec4e-467d-bbf5-ce3f64edb46a</param>
            <param name="rdfFile">Fichero con el Shape</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Middlewares.ErrorHandlingMiddleware">
            <summary>
            Clase que actua de Middleware para la gestión de las excepciones
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.AddRepositoryErrorResponse">
            <summary>
            Sirve para mostrar un error al añadir un repositorio con un nombre repetido
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.AddShapeConfigErrorResponse">
            <summary>
            Sirve para mostrar un error al añadir un shape
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ConfigRepositoriesResponse">
            <summary>
            Sirve para mostrar un ejemplo de respuesta de una lista de repositorios 
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ConfigRepositoryResponse">
            <summary>
            Sirve para mostrar un ejemplo de respuesta de un repositorios
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ModifyRepositoryErrorResponse">
            <summary>
            Sirve para mostrar un error de respuesta al intentar modificar un repositorio que no existe
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ModifyShapeConfigErrorResponse">
            <summary>
            Sirve para mostrar un error de respuesta al intentar modificar un repositorio que no existe
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ShapeConfigResponse">
            <summary>
            Sirve para mostrar un ejemplo de respuesta de un Shape
            </summary>
        </member>
        <member name="T:API_CARGA.ModelExamples.ShapesConfigsResponse">
            <summary>
            Sirve para mostrar un ejemplo de respuesta de una lista de Shapes
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverItem">
            <summary>
            Representa un item de descubrimiento
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation">
            <summary>
            Representa un problema de desambiguación en un DiscoverItem
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverDissambiguationCandiate">
            <summary>
            Representa un candidato para un problema de desambiguación en un DiscoverItem
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverDissambiguationCandiate.ID">
            <summary>
            Identificador del problema de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverDissambiguationCandiate.DiscoverDissambiguationID">
            <summary>
            Identificador del DiscoverDissambiguation
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverDissambiguationCandiate.IDCandidate">
            <summary>
            Candidato para la desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverDissambiguationCandiate.Score">
            <summary>
            Puntuación para la desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.ID">
            <summary>
            Identificador del problema de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DiscoverItemID">
            <summary>
            Identificador del discoverItem
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.IDOrigin">
            <summary>
            Identificador de la entidad en la que hay dudas
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverDissambiguation.DissambiguationCandiates">
            <summary>
            Candiatos de desambiguación
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguation">
            <summary>
            Representa descartes para un problema de desambiguación en un DiscoverItem
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguation.ID">
            <summary>
            Identificador del problema de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguation.DiscoverItemID">
            <summary>
            Identificador del discoverItem
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguation.IDOrigin">
            <summary>
            Identificador de la entidad para que le tenemos los descartes
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguation.DiscardCandidates">
            <summary>
            Candidatos descartados cargadas
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.ID">
            <summary>
            Identificador del item
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.Status">
            <summary>
            Indica el estado del item:
                Pending
                Processed
                ProcessedDissambiguationProblem
                Error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.Rdf">
            <summary>
            RDF original antes del descbrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverRdf">
            <summary>
            RDF final tras el descubrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.JobID">
            <summary>
            Identificador de la tarea de la que procede (en caso de que proceda de una tarea)
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.Publish">
            <summary>
            Indica si hay que publicar el resultado o no 
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DissambiguationProcessed">
            <summary>
            Indica si están ya resueltos los problemas de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscoverReport">
            <summary>
            Reporte de las tareas del descubrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DissambiguationProblems">
            <summary>
            Problemas de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.DiscardDissambiguations">
            <summary>
            Descartes de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverItem.LoadedEntities">
            <summary>
            Entidades cargadas
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Entities.DiscoverItem.UpdateDissambiguationProblems(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}},System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Modificamos el objeto DiscoverItem para guardarlo cuando ha habido problemas de desambiguación
            </summary>
            <param name="pProblems">Problemas de desambiguación</param>
            <param name="pLoadedEntities">Entidades ya cargadas en el grafo</param>
            <param name="pDiscoverRDF">RDF de descubrimiento</param>
        </member>
        <member name="M:API_CARGA.Models.Entities.DiscoverItem.UpdateDissambiguationDiscards(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            Modificamos el objeto DiscoverItem para guardarlo cuando hse han seleccionado descartes para la desmbiguación y se va a volver a procesar
            </summary>
            <param name="pDiscards">Problemas de desambiguación</param>
            <param name="pDiscoverRDF">RDF de descubrimiento</param>
        </member>
        <member name="M:API_CARGA.Models.Entities.DiscoverItem.UpdateReport(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Single}},System.String,System.String)">
            <summary>
            Modificamos el objeto DiscoverItem para guardarlo cuando se procesa para generar un report
            </summary>
            <param name="pProblems">Problemas de desambiguación</param>
            <param name="pDiscoverRDF">RDF de descubrimiento</param>       
            <param name="pDiscoverReport">Reporte</param>
        </member>
        <member name="M:API_CARGA.Models.Entities.DiscoverItem.UpdateProcessed">
            <summary>
            Modificamos el objeto DiscoverItem para guardarlo cuando se procesa correctamente
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Entities.DiscoverItem.UpdateError(System.String)">
            <summary>
            Modificamos el objeto DiscoverItem para guardarlo cuando se produce un error
            </summary>
            <param name="pError">Error</param>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverStateResult">
            <summary>
            Representa el estao de un item de descubrimiento
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation">
            <summary>
            Representa un problema de desambiguación en un DiscoverItem
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation.DiscoverDissambiguationCandiate">
            <summary>
            Representa un candidato para un problema de desambiguación en un DiscoverItem
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation.DiscoverDissambiguationCandiate.IDCandidate">
            <summary>
            Candidato para la desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation.DiscoverDissambiguationCandiate.Score">
            <summary>
            Puntuación para la desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation.IDOrigin">
            <summary>
            Identificador de la entidad en la que hay dudas
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverDissambiguation.DissambiguationCandiates">
            <summary>
            Candiatos de desambiguación de desambiguación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.ID">
            <summary>
            Identificador del item
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.Status">
            <summary>
            Indica el estado del item:
                Pending
                Processing
                Processed
                Error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.Rdf">
            <summary>
            RDF original antes del descbrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverRdf">
            <summary>
            RDF final tras el descubrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DiscoverReport">
            <summary>
            Reporte del proceso de descubrimiento
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.DiscoverStateResult.DissambiguationProblems">
            <summary>
            Problemas de desambiguación
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.IdentifierOAIPMH">
            <summary>
            Sirve encapsular los datos provenientes del ListIdentifiers
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.ProcessingJobState">
            <summary>
            Clase para guardar información sobre el estado en el que se encuntra la sincronización lanzada por una tarea
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.Id">
            <summary>
            Identificador
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.RepositoryId">
            <summary>
            Repositorio sincronizado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.JobId">
            <summary>
            Tarea que ha lanzado el proceso
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.ProcessNumIdentifierOAIPMH">
            <summary>
            Número de elementos procesados
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.TotalNumIdentifierOAIPMH">
            <summary>
            Número de elementos a procesar
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ProcessingJobState.LastIdentifierOAIPMH">
            <summary>
            Último elemento procesado
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.RepositoryConfig">
            <summary>
            Datos de configuración de un repositorio OAI-PMH
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.RepositoryConfigID">
            <summary>
            Identificador del repositorio
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.Name">
            <summary>
            Nombre del repositorio
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.OauthToken">
            <summary>
            Token OAUTH
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.RepositoryConfig.Url">
            <summary>
            url del repositorio
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.RepositorySync">
            <summary>
            Datos de una sincornización sobre un repositorio
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.ShapeConfig">
            <summary>
            Datos de configuración de una validación SHACL
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.ShapeConfigID">
            <summary>
            Identificador de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.Name">
            <summary>
            Nombre de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.RepositoryID">
            <summary>
            Identificador de la validación
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeConfig.Shape">
            <summary>
            Definición del shape SHACL
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Entities.ShapeReport">
            <summary>
            Datos de reporte de un Shape
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.severity">
            <summary>
            Severidad
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.focusNode">
            <summary>
            Nodo 
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.resultValue">
            <summary>
            Resultado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.message">
            <summary>
            Mensaje de error
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.resultPath">
            <summary>
            Path del resultado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.shapeName">
            <summary>
            Nombre del Shape
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.sourceShape">
            <summary>
            Identificador del shape SHACL
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.Result.shapeID">
            <summary>
            Identificador de la configuración del Shape configurado
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.severity">
            <summary>
            Severidad
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.conforms">
            <summary>
            Indica si no se incumple ninguna restricción
            </summary>
        </member>
        <member name="P:API_CARGA.Models.Entities.ShapeReport.results">
            <summary>
            Lista con las validaciones que no han pasado
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Services.CallApiNeedInfoPublisData">
            <summary>
            Clase que sirve para realizar las llamadas necesarias al controlador etl para poder realizar una sincronización
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiNeedInfoPublisData.CallGetApi(System.String,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Get a una url que tiene como base la configurada en el appSettings.json en la propiedad ConfigUrl
            </summary>
            <param name="urlMethod">método al que se hace la llamada</param>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiNeedInfoPublisData.CallDataPublish(System.String,System.String,System.Boolean,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Post al método /etl/data-publish para publicar un rdf
            </summary>
            <param name="rdf">contenido en rdf a publicar</param>
            <param name="jobId">En el caso de que haya sido una tarea la que ha lanzado la acción representa el identificador de la tarea</param>
            <param name="discoverProcessed">En el caso de que ya se haya procesado el descubrimiento se envía true y se inserta tal cual en BBDD (sin procesar descubrimiento)</param>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiNeedInfoPublisData.CallDataValidate(System.String,System.Guid,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Post al método /etl/data-validate para verificar un rdf
            </summary>
            <param name="rdf">contenido en rdf a publicar</param>
            <param name="repositoryIdentifier">Identificador del repositorio</param>
            <param name="token">Token de tipo Bearer para la seguridad entre apis</param>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiNeedInfoPublisData.CallPostApiFile(System.String,System.Net.Http.MultipartFormDataContent,API_CARGA.Models.Entities.TokenBearer,System.String)">
            <summary>
            Realizar una llamda Post para enviar un fichero
            </summary>
            <param name="urlMethod">método a llamar</param>
            <param name="item">Objeto con el fichero</param>
            <param name="parameters">parametros adicionales en formato queryString</param>
            <param name="token">Token de tipo Bearer para la seguridad entre apis</param>
        </member>
        <member name="T:API_CARGA.Models.Services.CallApiService">
            <summary>
            Clase para hacer llamadas api
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiService.CallPostApi(System.String,System.String,System.Object,API_CARGA.Models.Entities.TokenBearer,System.Boolean,System.String)">
            <summary>
            Hace la llamada post a una url
            </summary>
            <param name="urlBase">Url donde se encuentra el api</param>
            <param name="urlMethod">url del método</param>
            <param name="item">objeto a pasar</param>
            <param name="token">token bearer en caso de que sea necesario para la autenticación</param>
            <param name="isFile">si el objeto pasado es un fichero</param>
            <param name="fileName">nombre del parametro del fichero</param>
        </member>
        <member name="M:API_CARGA.Models.Services.CallApiUnidata.LoadTriples(System.Collections.Generic.List{System.String})">
            <summary>
            Carga los triples en el gráfo unidata
            </summary>
            <param name="triplesInsertar">triples a insertar</param>
        </member>
        <member name="T:API_CARGA.Models.Services.CallMockNeedPublishData">
            <summary>
            Clase que hace de Mock para el uso de la clase CallApiNeedPublishData de forma ficticia
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallMockNeedPublishData.CallGetApi(System.String,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Simula realizar una llamada para la obtención de unos datos ficticios que harían esas llamadas
            </summary>
            <param name="urlMethod">método a llamar</param>
        </member>
        <member name="T:API_CARGA.Models.Services.CallTokenService">
            <summary>
            clase para la obtención de los tokens de acceso
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallTokenService.CallTokenCarga">
            <summary>
            Obtiene el token de acceso al api de carga
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallTokenService.CallTokenOAIPMH">
            <summary>
            Obtiene el token de acceso al api de OAIPMH
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallTokenService.CallTokenUnidata">
            <summary>
            Obtiene el token de acceso al api de Unidata
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.CallTokenService.CallTokenIdentity(System.String)">
            <summary>
            Realiza la llamada para la obtención del token de acceso con el endpoint configurado en AuthorityGetToken
            </summary>
            <param name="stringData">Datos con el scope, el cliente id, el grantType y el secret</param>
        </member>
        <member name="M:API_CARGA.Models.Services.CallUri.GetUri(System.String)">
            <summary>
            Obtiene el resultado
            </summary>
            <param name="url">url a llamar</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Models.Services.ConfigSparql">
            <summary>
            Clase para obtener la configuración necesaria para el uso de Sparql
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetGraph">
            <summary>
            Obtiene el gráfo configurado en Sparql:Graph del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetGraphRoh">
            <summary>
            Obtiene el gráfo configurado en Sparql:GraphRoh del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetGraphRohes">
            <summary>
            Obtiene el gráfo configurado en Sparql:GraphRohes del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetGraphRohum">
            <summary>
            Obtiene el gráfo configurado en Sparql:GraphRohes del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetEndpoint">
            <summary>
            Obtiene el endpoint configurado en Sparql:Endpoint del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigSparql.GetQueryParam">
            <summary>
            Obtiene el parametro de query configurado en Sparql:QueryParam del fichero appsettings.json
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Services.ConfigTokenService">
            <summary>
            Clase para la obtención de los datos necesarios para obtener el token de acceso a los apis de apiCarga y OAIPMH_CVN
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetAuthorityGetToken">
            <summary>
            obtiene el endpoint para la llamada de obtención del token
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetGrantType">
            <summary>
            obtiene el tipo de concesión de Oauth
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetScopeCarga">
            <summary>
            obtiene la limitación de acceso al api de carga
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientIdCarga">
            <summary>
            obtiene el id de cliente del api de carga
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientSecretCarga">
            <summary>
            obtiene la "clave" de acceso del api de carga
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetScopeOAIPMH">
            <summary>
            obtiene la limitación de acceso al api de OAIPMH
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientSecretOAIPMH">
            <summary>
            obtiene la "clave" de acceso del api de OAIPMH
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientIdOAIPMH">
            <summary>
            obtiene la id del cliente de OAIPMH
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetScopeUnidata">
            <summary>
            obtiene la limitación de acceso al api de unidata
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientIdUnidata">
            <summary>
            obtiene el id de cliente del api de carga
            </summary> 
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigTokenService.GetClientSecretUnidata">
            <summary>
            obtiene la "clave" de acceso del api de carga
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Services.ConfigUrlService">
            <summary>
            Clase usada para obtener las urlsConfiguradas
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigUrlService.GetUrl">
            <summary>
            Obtiene la url configurada en ConfigUrl del fichero appsettings.json
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ConfigUrlService.GetUrlUnidata">
            <summary>
            Obtiene la url configurada en ConfigUrlUnidata del fichero appsettings.json
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Services.DiscoverItemBDService">
            <summary>
            Clase para gestionar las operaciones de las tareas de descubrimiento
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.GetDiscoverItemById(System.Guid)">
            <summary>
             Obtiene un item de descubrimiento
            </summary>
            <param name="id">Identificador del item</param>
            <remarks>Item de descubrimiento</remarks>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.GetDiscoverItemsErrorByJobMini(System.String)">
            <summary>
            Obtiene los items con error de un Job (sólo obtiene el identificador y el estado)
            </summary>
            <param name="jobId">Identificador del job</param>
            <returns>Lista de Items de descubrimiento (sólo obtiene el identificador y el estado)</returns>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.GetDiscoverItemsStatesByJob(System.String)">
            <summary>
            Obtiene el número de items en cada uno de los estados de descubrimiento
            </summary>
            <param name="jobId">Identificador del job</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.ExistsDiscoverItemsPending(System.String)">
            <summary>
            Obtiene si existen o no items pendientes de procesar por el descubrimiento para un Job
            </summary>
            <param name="jobId">Identificador del job</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.ExistsDiscoverItemsErrorOrDissambiguatinProblems(System.String)">
            <summary>
            Obtiene si existen o no items con estado error o procesados con problemas de desambiguación
            </summary>
            <param name="jobId">Identificador del job</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.AddDiscoverItem(API_CARGA.Models.Entities.DiscoverItem)">
            <summary>
            Añade un item de descubrimiento
            </summary>
            <param name="discoverItem">Item de descubrimiento</param>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.ModifyDiscoverItem(API_CARGA.Models.Entities.DiscoverItem)">
            <summary>
            Modifica una item de descubrimiento
            </summary>
            <param name="discoverItem">tem de descubrimiento a modificar con los datos nuevos</param>
        </member>
        <member name="M:API_CARGA.Models.Services.DiscoverItemBDService.RemoveDiscoverItem(System.Guid)">
            <summary>
            Elimina un discoverItem
            </summary>
            <param name="identifier">Identificador del item</param>
        </member>
        <member name="T:API_CARGA.Models.Services.ICallNeedPublishData">
            <summary>
            Clase que sirve para realizar las llamadas necesarias al controlador etl para poder realizar una sincronización
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ICallNeedPublishData.CallGetApi(System.String,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Get a una url que tiene como base la configurada en el appSettings.json en la propiedad ConfigUrl
            </summary>
            <param name="urlMethod">método al que se hace la llamada</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ICallNeedPublishData.CallPostApiFile(System.String,System.Net.Http.MultipartFormDataContent,API_CARGA.Models.Entities.TokenBearer,System.String)">
            <summary>
            Realizar una llamda Post para enviar un fichero
            </summary>
            <param name="urlMethod">método a llamar</param>
            <param name="item">Objeto con el fichero</param>
            <param name="parameters">parametros adicionales en formato queryString</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ICallNeedPublishData.CallDataValidate(System.String,System.Guid,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Post al método /etl/data-validate para verificar un rdf
            </summary>
            <param name="rdf">contenido en rdf a publicar</param>
            <param name="repositoryIdentifier">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ICallNeedPublishData.CallDataPublish(System.String,System.String,System.Boolean,API_CARGA.Models.Entities.TokenBearer)">
            <summary>
            Realizar una llamda Post al método /etl/data-publish para publicar un rdf
            </summary>
            <param name="rdf">contenido en rdf a publicar</param>
            <param name="jobId">En el caso de que haya sido una tarea la que ha lanzado la acción representa el identificador de la tarea</param>
            <param name="discoverProcessed">En el caso de que ya se haya procesado el descubrimiento se envía true y se inserta tal cual en BBDD (sin procesar descubrimiento)</param>
        </member>
        <member name="T:API_CARGA.Models.Services.ICallService">
            <summary>
            Clase para hacer llamadas api
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ICallService.CallPostApi(System.String,System.String,System.Object,API_CARGA.Models.Entities.TokenBearer,System.Boolean,System.String)">
            <summary>
            Hace la llamada post a una url
            </summary>
            <param name="urlBase">Url donde se encuentra el api</param>
            <param name="urlMethod">url del método</param>
            <param name="item">objeto a pasar</param>
            <param name="token">token bearer en caso de que sea necesario para la autenticación</param>
            <param name="isFile">si el objeto pasado es un fichero</param>
            <param name="fileName">nombre del parametro del fichero</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IRabbitMQService.PublishMessage(System.Object)">
            <summary>
            Encola un objeto en Rabbbit
            </summary>
            <param name="message">Objeto a encolar</param>
        </member>
        <member name="T:API_CARGA.Models.Services.IRepositoriesConfigService">
            <summary>
            Interfaz para gestionar las operaciones de los repositorios 
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.IRepositoriesConfigService.GetRepositoryConfigs">
            <summary>
            Obtiene el listado de repositorios
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.IRepositoriesConfigService.GetRepositoryConfigById(System.Guid)">
            <summary>
            Obtiene un repositorio
            </summary>
            <param name="id">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IRepositoriesConfigService.RemoveRepositoryConfig(System.Guid)">
            <summary>
            Elimina un repositorio
            </summary>
            <param name="identifier">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IRepositoriesConfigService.AddRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Añade un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IRepositoriesConfigService.ModifyRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Modifica un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a modificar con los datos nuevos</param>
        </member>
        <member name="T:API_CARGA.Models.Services.IShapesConfigService">
            <summary>
            Interfaz para gestionar las operaciones de los repositorios 
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.IShapesConfigService.GetShapesConfigs">
            <summary>
            Devuelve una lista shapes
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.IShapesConfigService.GetShapeConfigById(System.Guid)">
            <summary>
            Devuelve un shape
            </summary>
            <param name="id">Identificador del shape a devolver</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IShapesConfigService.RemoveShapeConfig(System.Guid)">
            <summary>
            Elimina un shape existente
            </summary>
            <param name="identifier">Identificador del shape a eliminar</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IShapesConfigService.AddShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Añade un shape
            </summary>
            <param name="shapeConfig">Shape a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.IShapesConfigService.ModifyShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Modifica un shape existente
            </summary>
            <param name="shapeConfig">Shape a modificar con los nuevos valores</param>
        </member>
        <member name="T:API_CARGA.Models.Services.OaiPublishRDFService">
            <summary>
            Clase para crear una sincronización
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.PublishRepositories(System.Guid,System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.DateTime})">
             <summary>
             Hace la sincronización del repositorio
             </summary>
             <param name="identifier">fIdentificador del repositorio</param>
             <param name="fechaFrom">fecha a partir de la cual se debe actualizar</param>
             <param name="set">tipo del objeto, usado para filtrar por agrupaciones</param>
             <param name="codigoObjeto">codigo del objeto a sincronizar, es necesario pasar el parametro set si se quiere pasar este parámetro</param>
             <param name="jobId">En el caso de que haya sido una tarea la que ha lanzado la acción representa el identificador de la tarea</param>
            <param name="jobCreatedDate">En el caso de que haya sido una tarea la que ha lanzado la acción representa la fecha de creación de dicha tarea</param>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.AddSyncro(API_CARGA.Models.Entities.IdentifierOAIPMH,System.String,System.Guid)">
            <summary>
            Añade un objeto de sincronización en base de datos
            </summary>
            <param name="lastSyncro">Objeto identificador de OAIPMH que contiene la fecha</param>
            <param name="repositoryId">Identificador del repositorio</param>
            <param name="set">tipo del objeto, usado para filtrar por agrupaciones</param>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.AddProcessingState(System.String,System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Añade o actualiza a la tabla ProcessingJobState una entrada para saber en que estado se encuentra la sincronización
            </summary>
            <param name="identifierOAIPMH">Objeto identificador de OAIPMH </param>
            <param name="repositoryId">Identificador del repositorio</param>
            <param name="jobId">Identificador de la tarea</param>
            <param name="index">Número del elemento que se está procesando</param>
            <param name="totalOfElements">Elementos a procesar</param>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.CallListIdentifier(System.Guid,System.String,System.Nullable{System.DateTime})">
            <summary>
            Obtiene una lista de identificadores
            </summary>
            <param name="identifierRepo">Identificador del repositorio</param>
            <param name="fechaFrom">fecha a partir de la cual se debe actualizar</param>
            <param name="set">tipo del objeto, usado para filtrar por agrupaciones</param>
            <returns>Lista de identificadores</returns>
        </member>
        <member name="M:API_CARGA.Models.Services.OaiPublishRDFService.CallGetRecord(System.Guid,System.String)">
            <summary>
            Obtiene el rdf del identificador en el repositorio
            </summary>
            <param name="repoIdentifier">Identificador del repositorio</param>
            <param name="identifier">Identificador del elemento</param>
            <returns>RDF</returns>
        </member>
        <member name="T:API_CARGA.Models.Services.OntologyService">
            <summary>
            Contiene los métodos necesarios para poder cargar una ontologia
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.OntologyService.RemoteFileExists(System.String)">
            <summary>
            Comprueba que un fichero exista remotamente
            </summary>
            <param name="url">Ulr del fichero</param>
            <returns></returns>
        </member>
        <member name="M:API_CARGA.Models.Services.OntologyService.GetOntology(API_CARGA.Models.Entities.OntologyEnum)">
            <summary>
            Lee el fichero de la ontologia
            </summary>
            <param name="ontologyType">Tipo de ontología</param>
            <returns>Devuelve el contenido de la ontologia</returns>
        </member>
        <member name="M:API_CARGA.Models.Services.OntologyService.SetOntology(Microsoft.AspNetCore.Http.IFormFile,API_CARGA.Models.Entities.OntologyEnum)">
            <summary>
            Remplaza la ontologia
            </summary>
            <param name="newOntology">Nueva ontologia</param>
            <param name="ontologyType">Tipo de ontologia a sustituir</param>
            <returns></returns>
        </member>
        <member name="T:API_CARGA.Models.Services.RabbitMQMockService">
            <summary>
            Interfaz para conectar con el servidor Rabbi
            </summary>
        </member>
        <member name="T:API_CARGA.Models.Services.RabbitMQService">
            <summary>
            Clase para conectar con el servidor Rabbi
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RabbitMQService.#ctor(Microsoft.Extensions.Options.IOptions{API_CARGA.Models.Entities.RabbitMQInfo})">
            <summary>
            Constructor de la clase que configura los datos necesarios para conectarse con rabbit
            </summary>
            <param name="ampOptionsSnapshot">Opciones de configuracion para Rabbit</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RabbitMQService.PublishMessage(System.Object)">
            <summary>
            Encola un objeto en Rabbbit
            </summary>
            <param name="message">Objeto a encolar</param>
        </member>
        <member name="T:API_CARGA.Models.Services.RepositoriesConfigBDService">
            <summary>
            Clase para gestionar las operaciones en base de datos de los repositorios 
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigBDService.GetRepositoryConfigs">
            <summary>
            Obtiene el listado de repositorios
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigBDService.GetRepositoryConfigById(System.Guid)">
            <summary>
            Obtiene un repositorio
            </summary>
            <param name="id">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigBDService.RemoveRepositoryConfig(System.Guid)">
            <summary>
            Elimina un repositorio
            </summary>
            <param name="identifier">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigBDService.AddRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Añade un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigBDService.ModifyRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Modifica un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a modificar con los datos nuevos</param>
        </member>
        <member name="T:API_CARGA.Models.Services.RepositoriesConfigMockService">
            <summary>
            Clase para gestionar las operaciones en memoria de los repositorios 
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.#ctor">
            <summary>
            Inicializa la lista de repositorios
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.GetRepositoryConfigs">
            <summary>
            Obtiene el listado de repositorios
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.GetRepositoryConfigById(System.Guid)">
            <summary>
            Obtiene un repositorio
            </summary>
            <param name="id">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.RemoveRepositoryConfig(System.Guid)">
            <summary>
            Elimina un repositorio
            </summary>
            <param name="identifier">Identificador del repositorio</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.AddRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Añade un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.RepositoriesConfigMockService.ModifyRepositoryConfig(API_CARGA.Models.Entities.RepositoryConfig)">
            <summary>
            Modifica un repositorio
            </summary>
            <param name="repositoryConfig">Repositorio a modificar con los datos nuevos</param>
        </member>
        <member name="T:API_CARGA.Models.Services.ShapesConfigBDService">
            <summary>
            Clase para gestionar los shapes en base de datos 
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigBDService.AddShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Añade un shape
            </summary>
            <param name="shapeConfig">Shape a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigBDService.GetShapeConfigById(System.Guid)">
            <summary>
            Devuelve un shape
            </summary>
            <param name="id">Identificador del shape a devolver</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigBDService.GetShapesConfigs">
            <summary>
            Devuelve una lista shapes
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigBDService.ModifyShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Modifica un shape existente
            </summary>
            <param name="shapeConfig">Shape a modificar con los nuevos valores</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigBDService.RemoveShapeConfig(System.Guid)">
            <summary>
            Elimina un shape existente
            </summary>
            <param name="identifier">Identificador del shape a eliminar</param>
        </member>
        <member name="T:API_CARGA.Models.Services.ShapesConfigMockService">
            <summary>
            Clase para gestionar los shapes en memoria
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.#ctor">
            <summary>
            Inicializa la lista de shapes
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.AddShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Añade un shape
            </summary>
            <param name="shapeConfig">Shape a añadir</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.GetShapeConfigById(System.Guid)">
            <summary>
            Devuelve un shape
            </summary>
            <param name="id">Identificador del shape a devolver</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.GetShapesConfigs">
            <summary>
            Devuelve una lista shapes
            </summary>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.ModifyShapeConfig(API_CARGA.Models.Entities.ShapeConfig)">
            <summary>
            Modifica un shape existente
            </summary>
            <param name="shapeConfig">Shape a modificar con los nuevos valores</param>
        </member>
        <member name="M:API_CARGA.Models.Services.ShapesConfigMockService.RemoveShapeConfig(System.Guid)">
            <summary>
            Elimina un shape existente
            </summary>
            <param name="identifier">Identificador del shape a eliminar</param>
        </member>
        <member name="M:API_CARGA.Models.Utility.SparqlUtility.ValidateRDF(System.String,System.Collections.Generic.List{API_CARGA.Models.Entities.ShapeConfig})">
            <summary>
            Valida un RDF
            </summary>
            <param name="pRdfFileContent">XML RDF</param>
            <param name="pShapesConfig">Lista de Shapes de validación</param>
            <returns>Lista de triples</returns>
        </member>
        <member name="M:API_CARGA.Models.Utility.SparqlUtility.ValidateRDF(System.String,System.String,System.String)">
            <summary>
            Valida un RDF
            </summary>
            <param name="pRdfFileContent">XML RDF</param>
            <param name="pValidation">Validación a realizar</param>
            <param name="pValidatoinFileName">Nombre del fichero de validación</param>
            <returns>Lista de triples</returns>
        </member>
        <member name="T:API_CARGA.ViewModel.PublishRepositoryModel">
            <summary>
            Clase para pasar datos entre apis
            </summary>
        </member>
        <member name="M:VDS.RDF.RohGraph.GetNextBlankNodeID">
            <summary>
            Creates a new unused Blank Node ID and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VDS.RDF.Query.Inference.RohRdfsReasoner">
            <summary>
            An Inference Engine which uses RDFS reasoning.
            </summary>
            <remarks>
            <para>
            Does basic RDFS inferencing using the schema taken from the Graph(s) which are provided in calls to the reasoners <see cref="M:VDS.RDF.Query.Inference.StaticRdfsReasoner.Initialise(VDS.RDF.IGraph)">Initialise()</see> method.
            </para>
            <para>
            Types of inference performed are as follows:.
            </para>
            <ul>
                <li>Class hierarchy reasoning - asserts additional types triples for anything that is typed as the subclass of a class.</li>
                <li>Property hierarchy reasoning - asserts additional property triples for anything where the predicate is a subproperty of a defined property</li>   
            </ul>
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.#ctor">
            <summary>
            Creates a new instance of the Static RdfsReasoner.
            </summary>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Apply(VDS.RDF.IGraph)">
            <summary>
            Applies inference to the given Graph and outputs the inferred information to that Graph.
            </summary>
            <param name="g">Graph.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Apply(VDS.RDF.IGraph,VDS.RDF.IGraph)">
            <summary>
            Applies inference to the Input Graph and outputs the inferred information to the Output Graph.
            </summary>
            <param name="input">Graph to apply inference to.</param>
            <param name="output">Graph inferred information is output to.</param>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.Initialise(VDS.RDF.IGraph)">
            <summary>
            Imports any Class heirarchy information from the given Graph into the Reasoners Knowledge Base in order to initialise the Reasoner.
            </summary>
            <param name="g">Graph to import from.</param>
            <remarks>
            Looks for Triples defining things to be classes and those defining that something is a subClass of something.
            </remarks>
        </member>
        <member name="M:VDS.RDF.Query.Inference.RohRdfsReasoner.InferClasses(VDS.RDF.Triple,VDS.RDF.IGraph,VDS.RDF.IGraph,System.Collections.Generic.List{VDS.RDF.Triple})">
            <summary>
            Helper method which applies Class hierarchy inferencing.
            </summary>
            <param name="t">Triple defining the type for something.</param>
            <param name="input">Input Graph.</param>
            <param name="output">Output Graph.</param>
            <param name="inferences">List of Inferences.</param>
        </member>
    </members>
</doc>
